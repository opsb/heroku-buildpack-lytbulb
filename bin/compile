#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3

bp_dir=$(cd $(dirname $0); cd ..; pwd)

source "$bp_dir/bin/common.sh"

installNode()
{
	status "Installing node"
	# Output npm debug info on error
	trap cat_npm_debug_log ERR

	# Look in package.json's engines.node field for a semver range
	local semver_range=$(cat $build_dir/app/package.json | $bp_dir/vendor/jq -r .engines.node)

	# Resolve node version using semver.io
	local node_version=$(curl --silent --get --data-urlencode "range=${semver_range}" https://semver.io/node/resolve)

	# Recommend using semver ranges in a safe manner
	if [ "$semver_range" == "null" ]; then
	  protip "Specify a node version in package.json"
	  semver_range=""
	elif [ "$semver_range" == "*" ]; then
	  protip "Avoid using semver ranges like '*' in engines.node"
	elif [ ${semver_range:0:1} == ">" ]; then
	  protip "Avoid using semver ranges starting with '>' in engines.node"
	fi	

	# Output info about requested range and resolved node version
	if [ "$semver_range" == "" ]; then
	  status "Defaulting to latest stable node: $node_version"
	else
	  status "Requested node range:  $semver_range"
	  status "Resolved node version: $node_version"
	fi

	# Download node from Heroku's S3 mirror of nodejs.org/dist
	status "Downloading and installing node"
	node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
	curl $node_url -s -o - | tar xzf - -C $build_dir

	status "done"
}

addApi()
{
	status "Copying api to build"
	cp -rf $build_dir/api/* $build_dir	
}

installNode
addApi

exit 0